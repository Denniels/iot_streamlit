#!/usr/bin/env python3
"""
Script de prueba para verificar la conexi√≥n mejorada con Arduino
"""

import sys
import time
import json
from datetime import datetime
from backend.config import Config, get_logger, setup_logging
from backend.db_writer import SupabaseClient
from backend.arduino_detector import ArduinoDetector

# Configurar logging
setup_logging()
logger = get_logger(__name__)

def test_arduino_connection():
    """Probar la conexi√≥n mejorada con Arduino"""
    print("üîß PRUEBA DE CONEXI√ìN ARDUINO MEJORADA")
    print("=" * 50)
    
    try:
        # Crear cliente de base de datos (mock para prueba)
        class MockDB:
            def register_device(self, data):
                print(f"‚úÖ Dispositivo registrado: {data['device_id']}")
            
            def log_system_event(self, event_type, device_id, message):
                print(f"üìù Evento: {event_type} - {device_id} - {message}")
            
            def insert_sensor_data(self, data):
                sensor_type = data['sensor_type']
                value = data['value']
                unit = data['unit']
                timestamp = datetime.now().strftime("%H:%M:%S")
                print(f"üìä [{timestamp}] {sensor_type}: {value}{unit}")
        
        # Crear detector con mock DB
        db_client = MockDB()
        detector = ArduinoDetector(db_client)
        
        # 1. Probar detecci√≥n autom√°tica
        print("\nüîç 1. DETECCI√ìN AUTOM√ÅTICA DEL PUERTO")
        print("-" * 40)
        
        if detector.detect_usb_arduino():
            print(f"‚úÖ Arduino detectado en: {detector.auto_detected_port}")
        else:
            print("‚ùå No se pudo detectar Arduino")
            return False
        
        # 2. Probar comandos
        print("\nüì§ 2. PRUEBA DE COMANDOS")
        print("-" * 40)
        
        commands = ['STATUS', 'READ_NOW']
        for cmd in commands:
            print(f"\nEnviando comando: {cmd}")
            response = detector.send_command(cmd)
            if response:
                print(f"‚úÖ Respuesta: {response}")
            else:
                print("‚ö†Ô∏è Sin respuesta")
        
        # 3. Monitorear datos autom√°ticos por 15 segundos
        print("\nüîÑ 3. MONITOREO DE DATOS AUTOM√ÅTICOS (15 segundos)")
        print("-" * 40)
        
        start_time = time.time()
        data_count = 0
        
        while time.time() - start_time < 15:
            data = detector.read_usb_data()
            if data:
                data_count += 1
                if data.get('message_type') == 'sensor_data':
                    sensors = data.get('sensors', {})
                    timestamp = datetime.now().strftime("%H:%M:%S.%f")[:-3]
                    print(f"[{timestamp}] üå°Ô∏è T1:{sensors.get('temperature_1')}¬∞C T2:{sensors.get('temperature_2')}¬∞C T3:{sensors.get('temperature_3')}¬∞C üí°:{sensors.get('light_level')}%")
            
            time.sleep(0.1)
        
        # 4. Resumen
        print("\nüìä 4. RESUMEN DE LA PRUEBA")
        print("-" * 40)
        print(f"Puerto detectado: {detector.auto_detected_port}")
        print(f"Datos recibidos: {data_count}")
        print(f"Frecuencia: {data_count/15:.1f} datos/segundo")
        
        if data_count > 0:
            print("‚úÖ ¬°CONEXI√ìN FUNCIONANDO CORRECTAMENTE!")
            return True
        else:
            print("‚ùå No se recibieron datos autom√°ticos")
            return False
            
    except Exception as e:
        print(f"‚ùå Error en la prueba: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    finally:
        # Cerrar conexi√≥n
        if hasattr(detector, 'usb_connection') and detector.usb_connection:
            detector.usb_connection.close()
            print("\nüîå Conexi√≥n cerrada")

def main():
    """Funci√≥n principal"""
    success = test_arduino_connection()
    
    if success:
        print("\nüéâ PRUEBA EXITOSA - El Arduino est√° funcionando correctamente")
        print("\nüí° RECOMENDACIONES:")
        print("1. La aplicaci√≥n ahora deber√≠a funcionar sin problemas")
        print("2. Se detecta autom√°ticamente el puerto correcto")
        print("3. Hay reconexi√≥n autom√°tica si se pierde la conexi√≥n")
        print("4. Los datos se procesan en formato JSON correctamente")
    else:
        print("\nüîß NECESITA ATENCI√ìN:")
        print("1. Verificar que el Arduino est√© programado correctamente")
        print("2. Comprobar la conexi√≥n USB")
        print("3. Revisar el c√≥digo del Arduino")
    
    return success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
